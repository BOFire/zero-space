<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>supervisor</title>
      <link href="/2021/08/20/supervi/"/>
      <url>/2021/08/20/supervi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><pre><code>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程</code></pre><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>pip install supervisor</code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h4 id="配置文件生成"><a href="#配置文件生成" class="headerlink" title="配置文件生成"></a>配置文件生成</h4><pre><code>  echo_supervisord_conf &gt; supervisor.conf   # 生成 supervisor 默认配置文件</code></pre><h4 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h4><pre><code>[unix_http_server]file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用;chmod=0700                 ;socket文件的mode，默认是0700;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid;[inet_http_server]         ;HTTP服务器，提供web管理界面;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性;username=user              ;登录管理后台的用户名;password=123               ;登录管理后台的密码[supervisord]logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.loglogfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份loglevel=info                ;日志级别，默认info，其它: debug,warn,tracepidfile=/tmp/supervisord.pid ;pid 文件nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024minprocs=200                 ;可以打开的进程数的最小值，默认 200[supervisorctl]serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord; [program:xx]是被管理的进程配置参数，xx是进程的名称[program:xx]command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令autostart=true       ; 在supervisord启动的时候也自动启动startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启startretries=3       ; 启动失败自动重试次数，默认是3user=tomcat          ; 用哪个用户启动进程，默认是rootpriority=999         ; 进程启动优先级，默认999，值小的优先启动redirect_stderr=true ; 把stderr重定向到stdout，默认falsestdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MBstdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.outstopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程;包含其它配置文件[include]files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</code></pre><h4 id="子进程配置文件"><a href="#子进程配置文件" class="headerlink" title="子进程配置文件"></a>子进程配置文件</h4><pre><code>给需要管理的子进程(程序)编写一个配置文件，放在/etc/supervisor.d/目录下，以.ini作为扩展名（每个进程的配置文件都可以单独分拆也可以把相关的脚本放一起）。如任意定义一个和脚本相关的项目名称的选项组（/etc/supervisord.d/test.conf）</code></pre><h5 id="子进程配置文件说明"><a href="#子进程配置文件说明" class="headerlink" title="子进程配置文件说明"></a>子进程配置文件说明</h5><pre><code>#项目名[program:blog]#脚本目录directory=/opt/bin#脚本执行命令command=/usr/bin/python /opt/bin/test.py#supervisor启动的时候是否随着同时启动，默认Trueautostart=true#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的autorestart=false#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1startsecs=1#脚本运行的用户身份 user = test#日志输出 stderr_logfile=/tmp/blog_stderr.log stdout_logfile=/tmp/blog_stdout.log #把stderr重定向到stdout，默认 falseredirect_stderr = true#stdout日志文件大小，默认 50MBstdout_logfile_maxbytes = 20MB#stdout日志文件备份数stdout_logfile_backups = 20</code></pre><p><em>最好每个服务单独配置</em></p><h2 id="使用命令"><a href="#使用命令" class="headerlink" title="使用命令"></a>使用命令</h2><pre><code>supervisord -c supervisor.conf        //通过配置文件启动supervisorsupervisorctl shutdown        //关闭supervisordsupervisorctl status        //查看所有进程的状态supervisorctl stop asd       //停止[all]|[appname]，asd为例supervisorctl start asd      //启动asdsupervisorctl restart       //重启asdsupervisorctl update        //配置文件修改后使用该命令加载新的配置supervisorctl reload        //重新启动配置中的所有程序亦可输入supervisorctl进入supervisorctl shell 交互</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gunicorn</title>
      <link href="/2021/08/20/gunicorn/"/>
      <url>/2021/08/20/gunicorn/</url>
      
        <content type="html"><![CDATA[<h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><pre><code>Nginx =&gt; Gunicorn =&gt; Flask/Django</code></pre><h3 id="Gunicorn-介绍"><a href="#Gunicorn-介绍" class="headerlink" title="Gunicorn 介绍"></a>Gunicorn 介绍</h3><pre><code>gunicorn是一个python Wsgi http server，只支持在类Unix系统上运行，来源于Ruby的unicorn项目。Gunicorn使用prefork master-worker模型（在gunicorn中，master被称为arbiter），能够与各种wsgi web框架协作。</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>pip3 install gunicorn</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>项目路径：gunicorn.conf</code></pre><h4 id="配置内容"><a href="#配置内容" class="headerlink" title="配置内容"></a>配置内容</h4><pre><code>server socketbind监听地址和端口。backlog服务器中在pending状态的最大连接数，即client处于waiting的数目。超过这个数目， client连接会得到一个error。建议值64-2048。worker 进程workersworker进程的数量。建议值2-4 x $(NUM_CORES)， 缺省为1。worker_classworker进程的工作方式。 有 sync, eventlet, gevent, tornado, gthread, 缺省值sync。threads工作进程中线程的数量。建议值2-4 x $(NUM_CORES)， 缺省值1。此配置只适用于gthread 进程工作方式， 因为gevent这种使用的是协程工作方式。worker_connections客户端最大同时连接数。只适用于eventlet， gevent工作方式。max_requestsworker重启之前处理的最大requests数， 缺省值为0表示自动重启disabled。主要是防止内存泄露。max_requests_jitter抖动参数，防止worker全部同时重启。timeout通常设为30。graceful_timeout接收到restart信号后，worker可以在graceful_timeout时间内，继续处理完当前requests。keepaliveserver端保持连接时间。securitylimit_request_linehttp request line最大字节数。值范围0-8190， 0表示无限制。limit_request_fieldhttp request中 header字段数的最大值。缺省为100，最大32768。limit_request_field_sizehttp request header字段最大字节数。0表示无限制。调试reload当代码有修改时，自动重启workers。适用于开发环境。reload_extra_files扩展reload配置，增加templates，configurations等文件修改监控。spew跟踪程序执行的每一行。check_config检查配置。server 机制sendfile系统底层拷贝数据方式，提供performance。chdir在app加载之前，进入到此目录。daemon应用是否以daemon方式运行。raw_envkey=value, 传递环境参数。pidfilepid存储文件路径。worker_tmp_dir临时工作目录。user指定worker进程的运行用户名。group指定worker进程运行用户所在组。umaskgunicorn创建文件的缺省权限。pythonpath附加到python path的目录列表。日志accesslog访问日志文件路径。access_log_format日志格式。 例如 %(h)s %(l)s %(u)s %(t)s &quot;%(r)s&quot; %(s)s %(b)s &quot;%(f)s&quot; &quot;%(a)s&quot; 。errorlog错误日志路径。loglever日志级别。debug, info, warning, error, critical.capture_output重定向stdout/stderr到error log file。logger_class日志实现类。缺省gunicorn.glogging.Logger 。logconfig日志配置文件。同python标准日志模块logging的配置。进程名proc_name设置进程名(setproctitle)，在ps，top等命令中会看到. 缺省值为default_proc_name配置。server钩子on_startingon_reloadwhen_readypre_forkpost_forkpost_worker_initworker_initworker_abortpre_execpre_requestpost_requestchild_exitworker-exitnworkers_changedon_exit</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><h4 id="指令运行"><a href="#指令运行" class="headerlink" title="指令运行"></a>指令运行</h4><pre><code>gunicorn gunicorn_demo:app</code></pre><h4 id="配置运行"><a href="#配置运行" class="headerlink" title="配置运行"></a>配置运行</h4><pre><code>gunicorn 工程名字.wsgi -c gunicorn配置文件夹/配置文件要改</code></pre><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ul><li>如果用到异步的worker模型，需要安装对应的模块（如gevent）</li><li>搭配supervisor进程管理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序小记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>胡言乱语之致郁系</title>
      <link href="/2021/08/15/yi-shun-jian-de-zi-wo/"/>
      <url>/2021/08/15/yi-shun-jian-de-zi-wo/</url>
      
        <content type="html"><![CDATA[<h2 id="胡言乱语之致郁系"><a href="#胡言乱语之致郁系" class="headerlink" title="胡言乱语之致郁系"></a>胡言乱语之致郁系</h2><p>无所事事的周末，难得的休息日，肆意的赖床，闲悠悠地看着电影，生活也没有那么着急。饿了楼下小铺买了两个卤鸡蛋，平时也没发现味道真不错。</p><p>昨天晚上调整车子，一不留神搞到了两三点，但总觉得差点意思，计划今天到车行一趟，让人帮忙看看。起来晚了，算早上过去太晚了，算中午过去又太早，也就这无事可做的瞬间，却陷入自己的迷思。</p><p>那些往日奉若圭臬的道理，过了那个鞭策的年纪，都被现实举重若轻的啪啪打脸，于是我们迷茫了，然后又用这些年吃过的亏，栽过的跟头凝练成盔甲，把自己裹得严严实实，却与当初的自己面目全非，然后去着陌生的终点，握着冷冰冰的手。对于这条道路，我不觉得错，毕竟，从来就没有感同身受，你也永远不可能真正去了解一个人，除非你穿上他的鞋子走来走去，站在他的角度考虑问题，可真当你走过他的路时，你连路过都会觉着难过。但我不愿意这么选。</p><p>似乎一切都没有什么永恒可言。以前流行的东西，现在已经换了新的，以后还会有其他的；代表爱情的钻石，现在还要看重量，以后也许还会有新的东西；以前耿直努力的人，现在都被发了好人卡；以前我们美誉为知识象牙塔的高校，现在发现都是各公司的技能培训所，将所谓的人才打磨标准输入社会，甚至连起跑线都开始充斥着资本的味道。也不知道之后会怎样。。。。。。似乎没标准才是一直以来所有的标准</p><h4 id="而在这股意识恣意乱流的社会中，我们就像个排排坐的发条木偶。"><a href="#而在这股意识恣意乱流的社会中，我们就像个排排坐的发条木偶。" class="headerlink" title="而在这股意识恣意乱流的社会中，我们就像个排排坐的发条木偶。"></a><u>而在这股意识恣意乱流的社会中，我们就像个排排坐的发条木偶。</u></h4><p>“考不上好的中学，你就没有大学上了，你看那谁谁谁”，“加油！”；</p><p>“考不上好的大学，你毕业就没人要了，你看那谁谁谁”，“冲啊！”</p><p>“找不到好工作，以后咋办呀，这么多年上的啥学”，“拼啊！”</p><p>“这么多年了，工资这么才这么点，你咋混的呀”，“稳住！”</p><p>“半辈子过去了，连份像样的事业都没有，你孩子以后怎么抬起头呀”，“挺住！”</p><p>“你看你这辈子咋就混成这样，你看你老板连中学的没上过”，“妈的！”</p><p>“你一生最喜欢的是什么呀？”，“喜欢？······”</p><p>回首来时路，看着那个对着信念目光炯炯的自己，一路走来，莫名有种红楼梦里的感觉，“眼看他起朱楼，眼看他宴宾客，眼看他楼塌了！”。似乎一切都在情理之中，但又似乎哪都不对。</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 致郁系 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
